[{"filePath":"/Users/azaatar/bowdoin-marketplace/packages/config/src/env.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":49,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":49,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":52,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":52,"endColumn":10}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// packages/config/src/env.ts\nimport 'dotenv/config';\nimport { z } from 'zod';\n\n/**\n * Centralized runtime environment schema validation.\n * Ensures all required environment variables are present and typed correctly.\n */\nconst EnvSchema = z.object({\n  // Runtime\n  NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),\n  PORT: z.coerce.number().int().positive().default(3000),\n\n  // Database\n  DATABASE_URL: z.string().url(),\n\n  // Auth (Okta / NextAuth.js)\n  NEXTAUTH_URL: z.string().url(),\n  NEXTAUTH_SECRET: z.string().min(32),\n  OKTA_CLIENT_ID: z.string(),\n  OKTA_CLIENT_SECRET: z.string(),\n  OKTA_ISSUER: z.string().url(),\n\n  // Redis\n  REDIS_URL: z.string().url(),\n\n  // S3 / Storage\n  S3_ENDPOINT: z.string().url().optional(),\n  S3_REGION: z.string(),\n  S3_BUCKET: z.string(),\n  S3_ACCESS_KEY_ID: z.string(),\n  S3_SECRET_ACCESS_KEY: z.string(),\n\n  // Email\n  EMAIL_FROM: z.string().email(),\n  SMTP_HOST: z.string(),\n  SMTP_PORT: z.coerce.number().int().positive(),\n  SMTP_USER: z.string(),\n  SMTP_PASS: z.string(),\n\n  // Observability\n  OTEL_EXPORTER_OTLP_ENDPOINT: z.string().url().optional(),\n  OTEL_SERVICE_NAME: z.string().default('bowdoin-marketplace'),\n\n  // Feature Flags\n  FEATURE_FLAGS: z.string().optional() // e.g. \"newMessaging,brunswickUsers\"\n});\n\nconst parsed = EnvSchema.safeParse(process.env);\n\nif (!parsed.success) {\n  console.error('❌ Invalid environment configuration:', parsed.error.flatten().fieldErrors);\n  throw new Error('Invalid environment variables');\n}\n\nexport const env = parsed.data;\n\n/**\n * Helper: parse feature flags into a Set for O(1) checks\n */\nexport const featureFlags = new Set(\n  env.FEATURE_FLAGS ? env.FEATURE_FLAGS.split(',').map((f) => f.trim()) : []\n);","usedDeprecatedRules":[]},{"filePath":"/Users/azaatar/bowdoin-marketplace/packages/config/src/flags.ts","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module './env'.","line":2,"column":35,"nodeType":"Literal","endLine":2,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":64,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":22},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-bitwise').","line":76,"column":5,"severity":1,"nodeType":null,"fix":{"range":[2527,2565],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-bitwise').","line":78,"column":5,"severity":1,"nodeType":null,"fix":{"range":[2625,2663],"text":" "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4989,4992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4989,4992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5119,5122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5119,5122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"// packages/config/src/flags.ts\nimport { env, featureFlags } from './env';\n\n/**\n * Centralized feature-flag definitions.\n * - Add new flags to FlagName and DEFAULTS.\n * - Flags can be enabled by:\n *    1) DEFAULTS (per-environment)\n *    2) FEATURE_FLAGS env list (comma-separated)\n *    3) FLAG_<NAME>=true env override (highest precedence)\n * - Supports deterministic percentage rollouts and variant bucketing.\n */\n\nexport type FlagName =\n  | 'brunswickUsers'          // allow non-Bowdoin community accounts & UI affordances\n  | 'communitySignup'         // self-serve email verification flow for residents\n  | 'emailVerification'       // email verification requirement for non-SAML accounts\n  | 'imagePipelineV2'         // new sharp pipeline / quality tuning\n  | 'ftsSearchV2'             // experimental search tuning\n  | 'sseMessaging'            // server-sent events for messages\n  | 'pwaInstallPrompt'        // show PWA install prompt hints\n  | 'adminImpersonation';     // admin-only: impersonate user for support\n\ntype FlagDefaults = Partial<Record<FlagName, boolean>>;\n\nconst DEFAULTS_BY_ENV: Record<typeof env.NODE_ENV, FlagDefaults> = {\n  development: {\n    brunswickUsers: true,\n    communitySignup: true,\n    emailVerification: true,\n    imagePipelineV2: true,\n    ftsSearchV2: true,\n    sseMessaging: true,\n    pwaInstallPrompt: false,\n    adminImpersonation: true,\n  },\n  test: {\n    brunswickUsers: true,\n    communitySignup: true,\n    emailVerification: true,\n    imagePipelineV2: false,\n    ftsSearchV2: false,\n    sseMessaging: false,\n    pwaInstallPrompt: false,\n    adminImpersonation: true,\n  },\n  production: {\n    brunswickUsers: true,\n    communitySignup: true,\n    emailVerification: true,\n    imagePipelineV2: true,\n    ftsSearchV2: false,\n    sseMessaging: true,\n    pwaInstallPrompt: true,\n    adminImpersonation: false,\n  },\n};\n\nconst DEFAULTS: FlagDefaults = DEFAULTS_BY_ENV[env.NODE_ENV] ?? {};\n\n/** Highest-precedence per-flag boolean override: FLAG_<UPPERCASE_NAME>=true/false */\nfunction envOverride(name: FlagName): boolean | undefined {\n  const key = `FLAG_${name.replace(/[^a-zA-Z0-9]/g, '_').toUpperCase()}`;\n  const raw = process.env[key];\n  if (raw == null) return undefined;\n  if (/^(1|true|yes|on)$/i.test(raw)) return true;\n  if (/^(0|false|no|off)$/i.test(raw)) return false;\n  return undefined;\n}\n\n/** Simple, stable hash for bucketing (djb2) */\nfunction djb2(input: string): number {\n  let hash = 5381;\n  for (let i = 0; i < input.length; i++) {\n    // hash * 33 + char\n    // eslint-disable-next-line no-bitwise\n    hash = ((hash << 5) + hash) + input.charCodeAt(i);\n    // eslint-disable-next-line no-bitwise\n    hash &= 0xffffffff;\n  }\n  // normalize to [0, 4294967295]\n  return hash >>> 0;\n}\n\nexport type AudienceKey = { userId?: string; email?: string };\n\n/**\n * Determine if a flag is enabled.\n * - precedence: envOverride -> FEATURE_FLAGS -> DEFAULTS\n * - if percent is provided, applies deterministic bucketing using audienceKey\n */\nexport function isEnabled(\n  name: FlagName,\n  options?: {\n    /** Percent rollout 0..100 (applied only if base flag resolves to true) */\n    percent?: number;\n    /** Stable key for bucketing (userId preferred, fallback to email) */\n    audienceKey?: AudienceKey;\n  }\n): boolean {\n  // 1) Explicit env override\n  const override = envOverride(name);\n  if (override !== undefined) {\n    return applyPercent(override, options);\n  }\n\n  // 2) FEATURE_FLAGS (comma-separated) from env.ts -> Set\n  if (featureFlags.has(name)) {\n    return applyPercent(true, options);\n  }\n\n  // 3) Defaults per env\n  const base = DEFAULTS[name] ?? false;\n  return applyPercent(base, options);\n}\n\nfunction applyPercent(base: boolean, options?: { percent?: number; audienceKey?: AudienceKey }) {\n  if (!base) return false;\n  const pct = options?.percent;\n  if (pct == null || pct >= 100) return true;\n  if (pct <= 0) return false;\n  const id = options?.audienceKey?.userId ?? options?.audienceKey?.email ?? 'anonymous';\n  const bucket = djb2(id + '::' + pct) % 100; // 0..99\n  return bucket < Math.floor(pct);\n}\n\n/**\n * Deterministically choose a variant for A/B/n testing.\n * Example: getVariant('ftsSearchV2', ['baseline','synonyms','trigram'], { audienceKey:{userId} })\n */\nexport function getVariant(\n  name: FlagName,\n  variants: string[],\n  audienceKey?: AudienceKey\n): string | undefined {\n  if (!isEnabled(name)) return undefined;\n  if (!variants.length) return undefined;\n  const id = audienceKey?.userId ?? audienceKey?.email ?? 'anonymous';\n  const idx = djb2(`${name}::${variants.join('|')}::${id}`) % variants.length;\n  return variants[idx];\n}\n\n/** Snapshot of all flags as booleans (no percent), useful for diagnostics and logs */\nexport function allFlags(audienceKey?: AudienceKey): Record<FlagName, boolean> {\n  const names = Object.keys(DEFAULTS) as FlagName[];\n  // Include any FEATURE_FLAGS not in defaults (forward-compat).\n  const extra = Array.from(featureFlags).filter((n): n is FlagName => (n as any) in DEFAULTS || true);\n\n  const set = new Set<FlagName>([...names, ...extra]);\n  const out: Record<FlagName, boolean> = {} as any;\n  for (const n of set) {\n    out[n] = isEnabled(n, { audienceKey });\n  }\n  return out;\n}\n\n/** Public list of declared flags (useful for admin UI) */\nexport const DECLARED_FLAGS = Object.freeze(\n  (Object.keys(DEFAULTS) as FlagName[]).sort()\n);","usedDeprecatedRules":[]}]