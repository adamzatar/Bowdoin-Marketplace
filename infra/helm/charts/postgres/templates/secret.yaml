# infra/helm/charts/postgres/templates/secret.yaml
#
# Secrets for PostgreSQL.
# - Primary credentials secret (superuser/app/replication)
# - Optional TLS secret (if you terminate TLS in Postgres and you don't use an existing secret)
#
# This template respects:
#   .Values.secrets.create
#   .Values.secrets.existingSecret
#   .Values.secrets.name
#   .Values.secrets.username
#   .Values.secrets.password
#   .Values.secrets.database
#   .Values.secrets.replicationUser
#   .Values.secrets.replicationPassword
#   .Values.tls.enabled
#   .Values.tls.existingSecret
#   .Values.tls.secretName
#   .Values.tls.ca
#   .Values.tls.cert
#   .Values.tls.key
#
# NOTE: Prefer pulling sensitive values from your external secret manager and set
# `existingSecret`, but this supports creating a secret for dev/test or simple clusters.

{{- $ns := default .Release.Namespace .Values.namespaceOverride -}}
{{- $fullname := ternary .Values.fullnameOverride (printf "%s-postgres" .Release.Name) (and (hasKey .Values "fullnameOverride") (ne .Values.fullnameOverride "")) -}}
{{- $labels := dict "app.kubernetes.io/name" "postgres" "app.kubernetes.io/instance" .Release.Name "app.kubernetes.io/managed-by" "Helm" "app.kubernetes.io/part-of" "bowdoin-marketplace" -}}

{{/* -----------------------------
     Credentials Secret (Opaque)
     ----------------------------- */}}
{{- if and (ne (default "" .Values.secrets.existingSecret) "") (not .Values.secrets.create) -}}
# Using existing secret: {{ .Values.secrets.existingSecret }}
{{- else if .Values.secrets.create }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ default (printf "%s-credentials" $fullname) .Values.secrets.name }}
  namespace: {{ $ns }}
  labels:
    {{- range $k, $v := $labels }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
  annotations:
    # Mark as managed by this chart
    bowdoin.io/managed: "true"
type: Opaque
stringData:
  # Superuser (cluster owner) credentials
  POSTGRES_USER: {{ required "secrets.username is required when creating the secret" .Values.secrets.username | quote }}
  POSTGRES_PASSWORD: {{ required "secrets.password is required when creating the secret" .Values.secrets.password | quote }}

  # Default database to create (optional, used by init scripts)
  POSTGRES_DB: {{ default "" .Values.secrets.database | quote }}

  # Replication credentials (optional; used when streaming replication or pglogical is enabled)
  REPLICATION_USER: {{ default "" .Values.secrets.replicationUser | quote }}
  REPLICATION_PASSWORD: {{ default "" .Values.secrets.replicationPassword | quote }}

  # Convenience connection URIs (optional; not consumed by Postgres but handy for Jobs/clients)
  POSTGRES_URI: {{ printf "postgres://%s:%s@%s-postgres:5432/%s?sslmode=%s" (default "" .Values.secrets.username) (default "" .Values.secrets.password) .Release.Name (default "" .Values.secrets.database) (ternary "require" "disable" (and .Values.tls.enabled (not .Values.tls.insecure))) | quote }}
  POSTGRES_URI_NO_DB: {{ printf "postgres://%s:%s@%s-postgres:5432/?sslmode=%s" (default "" .Values.secrets.username) (default "" .Values.secrets.password) .Release.Name (ternary "require" "disable" (and .Values.tls.enabled (not .Values.tls.insecure))) | quote }}
---
{{- end }}

{{/* -----------------------
     TLS Secret (optional)
     ----------------------- */}}
{{- if and .Values.tls.enabled (eq (default "" .Values.tls.existingSecret) "") }}
{{- if or .Values.tls.cert .Values.tls.key .Values.tls.ca }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ default (printf "%s-postgres-tls" $fullname) .Values.tls.secretName }}
  namespace: {{ $ns }}
  labels:
    {{- range $k, $v := $labels }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
  annotations:
    bowdoin.io/managed: "true"
type: kubernetes.io/tls
data:
  # When providing inline cert/key/ca in values, we base64-encode them here.
  {{- if .Values.tls.cert }}
  tls.crt: {{ .Values.tls.cert | b64enc }}
  {{- end }}
  {{- if .Values.tls.key }}
  tls.key: {{ .Values.tls.key | b64enc }}
  {{- end }}
  {{- if .Values.tls.ca }}
  ca.crt: {{ .Values.tls.ca | b64enc }}
  {{- end }}
{{- else }}
# TLS is enabled but no inline material provided and no existingSecret set.
# Either set `.Values.tls.existingSecret` to reference a pre-created secret,
# or provide `tls.cert` and `tls.key` (and optional `tls.ca`) to create one.
{{- end }}
{{- end }}