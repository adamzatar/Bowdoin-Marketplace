# infra/helm/charts/redis/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "redis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: {{ default "bowdoin-marketplace" .Values.podLabels.app_kubernetes_io_part_of | quote }}
    helm.sh/chart: {{ include "redis.chart" . }}
spec:
  serviceName: {{ include "redis.headlessName" . }}
  {{- if .Values.statefulset.podManagementPolicy }}
  podManagementPolicy: {{ .Values.statefulset.podManagementPolicy }}
  {{- end }}
  replicas: {{ .Values.replicaCount | int }}
  revisionHistoryLimit: {{ .Values.statefulset.revisionHistoryLimit | default 3 }}
  updateStrategy:
    type: {{ .Values.statefulset.updateStrategy | default "RollingUpdate" }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "redis.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "redis.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: cache
        {{- if .Values.podLabels }}
        {{- range $k, $v := .Values.podLabels }}
        {{ $k }}: {{ $v | quote }}
        {{- end }}
        {{- end }}
      annotations:
        {{- if .Values.annotations }}
        {{- toYaml .Values.annotations | nindent 8 }}
        {{- end }}
        {{- if .Values.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.port }}"
        {{- end }}
        checksum/config: {{ toJson .Values.config | sha256sum | quote }}
    spec:
      priorityClassName: {{ default "" .Values.statefulset.priorityClassName | quote }}
      enableServiceLinks: {{ ternary "true" "false" (default false .Values.statefulset.enableServiceLinks) | quote }}
      serviceAccountName: {{- if and .Values.serviceAccount.create (ne (default "" .Values.serviceAccount.name) "") -}}
        {{ .Values.serviceAccount.name }}
      {{- else if .Values.serviceAccount.create -}}
        {{ include "redis.serviceAccountName" . }}
      {{- else -}}
        {{ default "default" .Values.serviceAccount.name }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.statefulset.terminationGracePeriodSeconds | default 30 }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      topologySpreadConstraints:
        {{- if and .Values.topologySpreadConstraints.enabled .Values.topologySpreadConstraints.rules }}
        {{- toYaml .Values.topologySpreadConstraints.rules | nindent 8 }}
        {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.initContainers }}
        {{- toYaml .Values.initContainers | nindent 8 }}
        {{- end }}
        # Ensure /data ownership (only required on some storage classes)
        - name: volume-permissions
          image: busybox:1.36
          imagePullPolicy: IfNotPresent
          command: ["sh","-c","chown -R 1001:1001 /data && chmod 750 /data && mkdir -p /conf && chown 1001:1001 /conf"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /data
            - name: conf
              mountPath: /conf
      containers:
        - name: redis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          command:
            - /bin/sh
            - -c
            - |
              set -euo pipefail
              HOSTNAME="${HOSTNAME:-$(cat /etc/hostname)}"
              ORDINAL="${HOSTNAME##*-}"
              PRIMARY_NAME="{{ include "redis.fullname" . }}-0"
              PRIMARY_ADDR="${PRIMARY_NAME}.{{ include "redis.headlessName" . }}.{{ .Release.Namespace }}.svc.cluster.local"
              
              REDIS_CONF="/conf/redis.conf"
              : > "${REDIS_CONF}"

              echo "port 6379"                                >> "${REDIS_CONF}"
              echo "bind 0.0.0.0"                             >> "${REDIS_CONF}"
              echo "protected-mode yes"                       >> "${REDIS_CONF}"
              echo "daemonize no"                             >> "${REDIS_CONF}"
              echo "dir /data"                                >> "${REDIS_CONF}"
              echo "loglevel {{ .Values.logging.level }}"     >> "${REDIS_CONF}"
              echo "appendonly {{ .Values.config.appendonly }}" >> "${REDIS_CONF}"
              echo "appendfsync {{ .Values.config.appendfsync }}" >> "${REDIS_CONF}"
              {{- if .Values.config.save }}
              {{- range $s := .Values.config.save }}
              echo "save {{ $s }}"                            >> "${REDIS_CONF}"
              {{- end }}
              {{- else }}
              echo "save \"\""                                >> "${REDIS_CONF}"
              {{- end }}
              echo "maxmemory-policy {{ .Values.config.maxmemoryPolicy }}" >> "${REDIS_CONF}"

              {{- if .Values.config.extraConfig }}
              # Extra raw lines
              cat <<'EXTRA' >> "${REDIS_CONF}"
              {{- range $line := .Values.config.extraConfig }}
              {{ $line }}
              {{- end }}
EXTRA
              {{- end }}

              {{- if .Values.auth.enabled }}
              {{- if .Values.auth.username }}
              # Redis 6+ ACL user with all permissions (adjust as needed)
              echo "user {{ .Values.auth.username }} on >${REDIS_PASSWORD} allcommands allkeys" >> "${REDIS_CONF}"
              {{- else }}
              echo "requirepass ${REDIS_PASSWORD}"            >> "${REDIS_CONF}"
              {{- end }}
              {{- end }}

              # Configure replicas to follow pod-0 when replicaCount > 1
              if [ "${ORDINAL}" != "0" ] && [ "{{ .Values.replicaCount }}" -gt 1 ]; then
                echo "replicaof ${PRIMARY_ADDR} 6379"        >> "${REDIS_CONF}"
                {{- if .Values.auth.enabled }}
                echo "masterauth ${REDIS_PASSWORD}"          >> "${REDIS_CONF}"
                {{- end }}
              fi

              {{- if .Values.tls.enabled }}
              {{- if .Values.tls.certManager.enabled }}
              echo "tls-port 6379"                            >> "${REDIS_CONF}"
              echo "port 0"                                   >> "${REDIS_CONF}"
              echo "tls-cert-file /tls/tls.crt"               >> "${REDIS_CONF}"
              echo "tls-key-file /tls/tls.key"                >> "${REDIS_CONF}"
              echo "tls-ca-cert-file /tls/ca.crt"             >> "${REDIS_CONF}"
              {{- if .Values.tls.requireClientAuth }}
              echo "tls-auth-clients yes"                     >> "${REDIS_CONF}"
              {{- else }}
              echo "tls-auth-clients no"                      >> "${REDIS_CONF}"
              {{- end }}
              {{- else if .Values.tls.existingSecretName }}
              echo "tls-port 6379"                            >> "${REDIS_CONF}"
              echo "port 0"                                   >> "${REDIS_CONF}"
              echo "tls-cert-file /tls/tls.crt"               >> "${REDIS_CONF}"
              echo "tls-key-file /tls/tls.key"                >> "${REDIS_CONF}"
              echo "tls-ca-cert-file /tls/ca.crt"             >> "${REDIS_CONF}"
              {{- if .Values.tls.requireClientAuth }}
              echo "tls-auth-clients yes"                     >> "${REDIS_CONF}"
              {{- else }}
              echo "tls-auth-clients no"                      >> "${REDIS_CONF}"
              {{- end }}
              {{- end }}
              {{- end }}

              exec redis-server "${REDIS_CONF}"
          env:
            - name: POD_NAME
              valueFrom: { fieldRef: { fieldPath: metadata.name } }
            - name: POD_NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
            {{- if and .Values.auth.enabled (or (not .Values.auth.existingSecretName) (eq .Values.auth.existingSecretName "")) (and .Values.auth.createSecret .Values.auth.password) }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.authSecretName" . }}
                  key: REDIS_PASSWORD
            {{- else if and .Values.auth.enabled .Values.auth.existingSecretName }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecretName }}
                  key: REDIS_PASSWORD
            {{- else }}
            - name: REDIS_PASSWORD
              value: ""
            {{- end }}
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.startupProbe }}
          startupProbe:
            {{- toYaml .Values.startupProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: conf
              mountPath: /conf
            - name: tmp
              mountPath: /tmp
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # Best-effort graceful shutdown
                    if command -v redis-cli >/dev/null 2>&1; then
                      {{- if .Values.auth.enabled }}
                      redis-cli -a "${REDIS_PASSWORD}" -h 127.0.0.1 -p 6379 shutdown nosave || true
                      {{- else }}
                      redis-cli -h 127.0.0.1 -p 6379 shutdown nosave || true
                      {{- end }}
                    fi
        {{- if .Values.metrics.enabled }}
        - name: redis-exporter
          image: "{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | default "IfNotPresent" }}
          env:
            - name: REDIS_ADDR
              value: "redis://127.0.0.1:6379"
            {{- if .Values.auth.enabled }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.authSecretName" . }}
                  key: REDIS_PASSWORD
            {{- end }}
          args:
            - "--web.listen-address=:{{ .Values.metrics.port }}"
            - "--redis.addr=$(REDIS_ADDR)"
            {{- range .Values.metrics.extraArgs }}
            - "{{ . }}"
            {{- end }}
          ports:
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.metrics.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
        {{- end }}
      volumes:
        - name: conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        {{- if and .Values.tls.enabled (or .Values.tls.existingSecretName .Values.tls.certManager.enabled) }}
        - name: tls
          {{- if .Values.tls.existingSecretName }}
          secret:
            secretName: {{ .Values.tls.existingSecretName }}
          {{- else }}
          secret:
            secretName: {{ include "redis.tlsSecretName" . }}
          {{- end }}
        {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          {{- if .Values.persistence.annotations }}
          {{- toYaml .Values.persistence.annotations | nindent 10 }}
          {{- end }}
        labels:
          {{- if .Values.persistence.labels }}
          {{- toYaml .Values.persistence.labels | nindent 10 }}
          {{- end }}
      spec:
        accessModes: {{ toJson .Values.persistence.accessModes }}
        {{- if .Values.persistence.storageClassName }}
        storageClassName: {{ .Values.persistence.storageClassName | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.selector }}
        selector:
          {{- toYaml .Values.persistence.selector | nindent 10 }}
        {{- end }}
---
{{- /* HEADLESS SERVICE (if enabled) */ -}}
{{- if .Values.headlessService.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "redis.headlessName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "redis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: cache
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: redis
      port: {{ .Values.service.port }}
      targetPort: redis
      protocol: TCP
  selector:
    app.kubernetes.io/name: {{ include "redis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: cache
{{- end }}
---
# ClusterIP service for clients
apiVersion: v1
kind: Service
metadata:
  name: {{ include "redis.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "redis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: cache
  {{- with .Values.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.service.type }}
  sessionAffinity: {{ .Values.service.sessionAffinity | default "None" }}
  ports:
    - name: redis
      port: {{ .Values.service.port }}
      targetPort: redis
      protocol: TCP
  selector:
    app.kubernetes.io/name: {{ include "redis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: cache