# infra/helm/charts/redis/templates/configmap.yaml
{{- /*
ConfigMap that renders a hardened redis.conf and a simple healthcheck script.
No secrets are embedded here â€” auth is injected via env/secret and the container
command/args (see StatefulSet). This lets you rotate credentials without
changing this configmap.

Values used (see values.yaml):
  service.port
  redis:
    databases
    maxmemory
    maxmemoryPolicy
    appendonly
    save
    tcpKeepalive
    timeout
    hz
    loglevel
    stopWritesOnBgsaveError
    notifyKeyspaceEvents
    lazyfreeLazyEviction
    lazyfreeLazyExpire
    lazyfreeLazyServerDel
    replicaReadOnly
    ioThreads
    clusterEnabled
    clusterConfigFile
    clusterNodeTimeout
    clusterRequireFullCoverage
    extraConfig
*/ -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redis.configMapName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "redis.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: cache
    helm.sh/chart: {{ include "redis.chart" . }}
data:
  # ---------------------------
  # Primary Redis configuration
  # ---------------------------
  redis.conf: |-
    ############################
    # Auto-generated by Helm.  #
    ############################

    # Networking
    bind 0.0.0.0
    port {{ .Values.service.port }}
    protected-mode yes
    tcp-keepalive {{ default 300 .Values.redis.tcpKeepalive }}
    timeout {{ default 0 .Values.redis.timeout }}

    # Logging
    logfile ""
    loglevel {{ default "notice" .Values.redis.loglevel }}

    # Databases
    databases {{ default 16 .Values.redis.databases }}

    # Persistence
    appendonly {{ ternary "yes" "no" (default false .Values.redis.appendonly) }}
    {{- if hasKey .Values.redis "save" }}
    {{- if .Values.redis.save }}
    {{- /* explicit save rules */}}
    {{- range $rule := .Values.redis.save }}
    save {{ $rule }}
    {{- end }}
    {{- else }}
    save ""
    {{- end }}
    {{- else }}
    # Disable RDB automatic snapshots by default in Kubernetes
    save ""
    {{- end }}
    stop-writes-on-bgsave-error {{ ternary "yes" "no" (default true .Values.redis.stopWritesOnBgsaveError) }}

    # Memory management
    maxmemory {{ default "0" .Values.redis.maxmemory }}
    maxmemory-policy {{ default "volatile-lru" .Values.redis.maxmemoryPolicy }}

    # Lazy freeing (to reduce latency spikes)
    {{- if hasKey .Values.redis "lazyfreeLazyEviction" }}
    lazyfree-lazy-eviction {{ ternary "yes" "no" .Values.redis.lazyfreeLazyEviction }}
    {{- end }}
    {{- if hasKey .Values.redis "lazyfreeLazyExpire" }}
    lazyfree-lazy-expire {{ ternary "yes" "no" .Values.redis.lazyfreeLazyExpire }}
    {{- end }}
    {{- if hasKey .Values.redis "lazyfreeLazyServerDel" }}
    lazyfree-lazy-server-del {{ ternary "yes" "no" .Values.redis.lazyfreeLazyServerDel }}
    {{- end }}

    # Replication / Read-only replicas
    replica-read-only {{ ternary "yes" "no" (default true .Values.redis.replicaReadOnly) }}

    # General tuning
    hz {{ default 10 .Values.redis.hz }}
    {{- if and (hasKey .Values.redis "ioThreads") (gt (int (toString .Values.redis.ioThreads)) 0) }}
    io-threads {{ .Values.redis.ioThreads }}
    {{- end }}

    # Keyspace notifications (disabled by default)
    {{- if .Values.redis.notifyKeyspaceEvents }}
    notify-keyspace-events {{ .Values.redis.notifyKeyspaceEvents | quote }}
    {{- else }}
    notify-keyspace-events ""
    {{- end }}

    # Security
    # DO NOT put 'requirepass' here. Password is injected via container args/env.

    # Cluster mode (off by default)
    cluster-enabled {{ ternary "yes" "no" (default false .Values.redis.clusterEnabled) }}
    {{- if (default false .Values.redis.clusterEnabled) }}
    cluster-config-file {{ default "nodes.conf" .Values.redis.clusterConfigFile }}
    cluster-node-timeout {{ default 15000 .Values.redis.clusterNodeTimeout }}
    cluster-require-full-coverage {{ ternary "yes" "no" (default true .Values.redis.clusterRequireFullCoverage) }}
    {{- end }}

    # Extra user-provided configuration
    {{- with .Values.redis.extraConfig }}
    # --- extraConfig start ---
{{ . | nindent 4 }}
    # --- extraConfig end ---
    {{- end }}

  # ----------------------------------------
  # Healthcheck script used by probes (sh)
  # ----------------------------------------
  healthcheck.sh: |-
    #!/usr/bin/env sh
    set -eu

    HOST="${HOST:-127.0.0.1}"
    PORT="${PORT:-{{ .Values.service.port }}}"

    # If a password exists, pass it to redis-cli.
    AUTH_ARGS=""
    if [ -n "${REDIS_PASSWORD:-}" ]; then
      AUTH_ARGS="-a ${REDIS_PASSWORD}"
    fi

    if ! command -v redis-cli >/dev/null 2>&1; then
      echo "redis-cli not found in PATH" >&2
      exit 1
    fi

    # PING; consider ready only if PONG is returned.
    if redis-cli -h "${HOST}" -p "${PORT}" ${AUTH_ARGS} PING | grep -q "PONG"; then
      exit 0
    else
      echo "Redis did not return PONG" >&2
      exit 1
    fi