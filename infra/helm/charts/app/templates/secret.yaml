# infra/helm/charts/app/templates/secret.yaml
{{- /*
Application runtime Secret.
- Creates a namespaced Secret with your app's sensitive configuration.
- If you use an external Secret manager or already have a Secret, set
  `.Values.secrets.existingSecret` and this manifest will not render.

Supports:
  * type (default Opaque)
  * labels/annotations merge
  * stringData (plain strings) and data (pre–base64)
  * immutable flag
  * optional Stakater Reloader toggle

Usage examples in values.yaml:

secrets:
  enabled: true
  nameOverride: ""
  existingSecret: "" # set to "my-precreated-secret" to skip creation
  type: Opaque
  immutable: false
  reloader: true
  labels:
    bowdoin.io/scope: "runtime"
  annotations:
    bowdoin.io/rotatable: "true"
  # Prefer stringData for developer ergonomics (K8s will base64 it server-side)
  stringData:
    DATABASE_URL: postgres://user:pass@postgres:5432/app
    NEXTAUTH_SECRET: "replace-me"
    OKTA_CLIENT_ID: "xxxx"
    OKTA_CLIENT_SECRET: "yyyy"
    REDIS_URL: "redis://redis:6379"
    S3_BUCKET: "uploads"
    S3_ACCESS_KEY_ID: "…"
    S3_SECRET_ACCESS_KEY: "…"
  # If you must provide raw base64, use data:
  # data:
  #   SOME_BLOB: "{{ .Files.Get \"certs/ca.crt\" | b64enc }}"
*/ -}}

{{- if and .Values.secrets.enabled (not .Values.secrets.existingSecret) }}

{{- $appName := default .Chart.Name .Values.app.name -}}
{{- $secretName := default (printf "%s-env" $appName) .Values.secrets.nameOverride -}}
{{- $type := default "Opaque" .Values.secrets.type -}}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName | trunc 63 | trimSuffix "-" }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: bowdoin-marketplace
    app.kubernetes.io/component: {{ default "web" .Values.app.component | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    {{- with .Values.secrets.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- /* Toggle Stakater Reloader if your cluster uses it */}}
    {{- if .Values.secrets.reloader }}
    reloader.stakater.dev/auto: "true"
    {{- end }}
    {{- with .Values.secrets.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
type: {{ $type }}
{{- /* Prefer stringData for ergonomics */}}
{{- if or .Values.secrets.stringData .Values.secrets.data }}
{{- if .Values.secrets.stringData }}
stringData:
  {{- range $k, $v := .Values.secrets.stringData }}
  {{ $k }}: {{ $v | toString | quote }}
  {{- end }}
{{- end }}
{{- if .Values.secrets.data }}
data:
  {{- /* assume values are already base64 or templated with b64enc */}}
  {{- range $k, $v := .Values.secrets.data }}
  {{ $k }}: {{ $v | toString }}
  {{- end }}
{{- end }}
{{- else }}
stringData: {}
{{- end }}
{{- if hasKey .Values.secrets "immutable" }}
immutable: {{ .Values.secrets.immutable }}
{{- end }}

{{- end }}