# infra/helm/charts/minio/templates/bucket-job.yaml
#
# Job to create and configure S3 buckets in MinIO using `mc`.
# Runs once on install/upgrade (can be disabled).
#
# Features:
# - Creates buckets listed in `.Values.buckets`.
# - Supports setting bucket policies (private, download, upload, public).
# - Supports lifecycle rules (e.g., auto-expire).
# - Depends on MinIO service being ready.
# - Uses credentials from the MinIO Secret.
#
{{- if .Values.buckets.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "minio.fullname" . }}-create-buckets
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: bucket-job
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: bucket-job
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ include "minio.serviceAccountName" . }}
      initContainers:
        - name: wait-for-minio
          image: curlimages/curl:8.9.1
          command:
            - sh
            - -c
            - |
              echo "Waiting for MinIO to be ready..."
              until curl -s http://{{ include "minio.fullname" . }}:{{ .Values.service.port }} >/dev/null; do
                echo "MinIO not ready yet. Sleeping..."
                sleep 5
              done
              echo "MinIO is ready!"
      containers:
        - name: create-buckets
          image: minio/mc:RELEASE.2025-01-31T05-20-00Z
          imagePullPolicy: IfNotPresent
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-credentials" (include "minio.fullname" .)) .Values.secrets.name }}
                  key: rootUser
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-credentials" (include "minio.fullname" .)) .Values.secrets.name }}
                  key: rootPassword
          command:
            - sh
            - -c
            - |
              set -euo pipefail
              echo "Configuring MinIO client..."
              mc alias set myminio http://{{ include "minio.fullname" . }}:{{ .Values.service.port }} "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"

              {{- range .Values.buckets.definitions }}
              echo "Creating bucket: {{ .name }}"
              mc mb --ignore-existing myminio/{{ .name }}

              {{- if .policy }}
              echo "Setting policy '{{ .policy }}' on bucket {{ .name }}"
              mc anonymous set {{ .policy }} myminio/{{ .name }}
              {{- end }}

              {{- if .lifecycle }}
              echo "Applying lifecycle policy to bucket {{ .name }}"
              cat > /tmp/lifecycle.json <<EOF
              {
                "Rules": [
                  {
                    "ID": "auto-expire",
                    "Status": "Enabled",
                    "Expiration": { "Days": {{ .lifecycle.expireDays | default 30 }} },
                    "Filter": { "Prefix": "" }
                  }
                ]
              }
              EOF
              mc ilm import myminio/{{ .name }} < /tmp/lifecycle.json
              {{- end }}

              {{- end }}
              echo "All buckets have been configured."
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
{{- end }}
