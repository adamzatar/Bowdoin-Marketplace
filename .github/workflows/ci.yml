name: Infra Deploy (CDK via OIDC)

on:
  push:
    branches: [ "main" ]
    paths:
      - "infra/**"
      - ".github/workflows/infra-deploy.yml"
  workflow_dispatch:
    inputs:
      enableCloudFront:
        description: "Enable CloudFront (true/false)"
        required: false
        default: "false"
      doBootstrap:
        description: "Run 'cdk bootstrap' before deploy (only needed once per account/region)"
        required: false
        default: "false"

concurrency:
  group: infra-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

defaults:
  run:
    shell: bash

env:
  CI: "true"
  NODE_VERSION: "20.11.1"
  PNPM_VERSION: "10.17.1"
  AWS_REGION: "us-east-1"

jobs:
  deploy:
    # Prevent forks from attempting to assume your AWS role
    if: github.repository == 'adamzatar/Bowdoin-Marketplace'
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      AWS_OIDC_ROLE_ARN: ${{ vars.AWS_OIDC_ROLE_ARN }}
      ROOT_DOMAIN: ${{ vars.ROOT_DOMAIN }}
      APP_SUBDOMAIN: ${{ vars.APP_SUBDOMAIN }}
      ENABLE_CLOUDFRONT: ${{ github.event.inputs.enableCloudFront || 'false' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          check-latest: true

      - name: Versions
        run: |
          node -v
          pnpm -v
          corepack --version || true

      - name: PNPM store path
        id: pnpm-store
        run: echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: PNPM network tuning
        run: |
          pnpm config set fetch-retries 5
          pnpm config set fetch-retry-factor 3
          pnpm config set fetch-retry-maxtimeout 60000
          pnpm config set fetch-retry-mintimeout 5000

      - name: Install deps (infra only; allow lock refresh)
        run: |
          set -euo pipefail
          pnpm install --no-frozen-lockfile --filter ./infra...

      - name: Build infra only
        working-directory: infra
        run: pnpm run build

      - name: Preflight — required values present
        run: |
          missing=0
          for v in AWS_OIDC_ROLE_ARN ROOT_DOMAIN; do
            if [[ -z "${!v}" ]]; then
              echo "::error::Missing required var: $v"
              missing=1
            fi
          done
          if [[ "${APP_SUBDOMAIN:-}" == '""' ]]; then
            APP_SUBDOMAIN=""
            echo "Sanitized APP_SUBDOMAIN -> <empty>"
          fi
          if [[ "$missing" -ne 0 ]]; then
            echo "Define repo variables in Settings → Actions → Variables:"
            echo "  • AWS_OIDC_ROLE_ARN (e.g., arn:aws:iam::<ACCOUNT_ID>:role/BowdoinCdkDeployRole)"
            echo "  • ROOT_DOMAIN (e.g., bowdoinmarketplace.com)"
            exit 1
          fi

      # ─────────────────────────────────────────────────────────────────────────
      # OIDC CLAIMS DEBUG — read GitHub's runtime env (no ${{ env.* }} indirection)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Debug OIDC token claims
        run: |
          set -euo pipefail

          if [[ -z "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" || -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" ]]; then
            echo "::error::ACTIONS_ID_TOKEN_REQUEST_* env not available (check permissions: id-token: write)."
            env | sort | sed -n '1,120p' || true
            exit 1
          fi

          RESP="$(curl -sS -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=sts.amazonaws.com")"

          JWT="$(echo "$RESP" | jq -r .value || true)"
          if [[ -z "${JWT:-}" || "$JWT" == "null" ]]; then
            echo "::error::Failed to obtain OIDC token"
            echo "$RESP"
            exit 1
          fi

          PAYLOAD_B64="$(echo "$JWT" | cut -d'.' -f2)"
          MOD=$(( ${#PAYLOAD_B64} % 4 ))
          if [ $MOD -eq 2 ]; then PAYLOAD_B64="${PAYLOAD_B64}==";
          elif [ $MOD -eq 3 ]; then PAYLOAD_B64="${PAYLOAD_B64}="; fi

          CLAIMS="$(echo "$PAYLOAD_B64" | tr '_-' '/+' | base64 -d 2>/dev/null || true)"

          echo "::group::OIDC JWT claims (decoded payload)"
          echo "$CLAIMS" | jq .
          echo "::endgroup::"

          echo "aud:  $(echo "$CLAIMS" | jq -r .aud)"
          echo "repo: $(echo "$CLAIMS" | jq -r .repository)"
          echo "sub:  $(echo "$CLAIMS" | jq -r .sub)"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: bowdoin-cdk-deploy

      - name: WhoAmI
        run: aws sts get-caller-identity

      - name: CDK bootstrap (optional)
        if: github.event.inputs.doBootstrap == 'true'
        working-directory: infra
        run: pnpm run bootstrap

      - name: CDK synth
        working-directory: infra
        run: |
          pnpm run synth -- \
            -c enableCloudFront="$ENABLE_CLOUDFRONT" \
            -c rootDomain="$ROOT_DOMAIN" \
            -c appSubdomain="${APP_SUBDOMAIN:-}" \
            -c region="$AWS_REGION"

      - name: Upload synthesized templates
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: cdk.out
          path: infra/cdk.out
          retention-days: 7

      - name: CDK diff
        working-directory: infra
        run: |
          pnpm run diff -- \
            -c enableCloudFront="$ENABLE_CLOUDFRONT" \
            -c rootDomain="$ROOT_DOMAIN" \
            -c appSubdomain="${APP_SUBDOMAIN:-}" \
            -c region="$AWS_REGION" || true

      - name: CDK deploy
        working-directory: infra
        run: |
          pnpm run deploy -- \
            -c enableCloudFront="$ENABLE_CLOUDFRONT" \
            -c rootDomain="$ROOT_DOMAIN" \
            -c appSubdomain="${APP_SUBDOMAIN:-}" \
            -c region="$AWS_REGION" \
            --require-approval=never

      - name: Upload CDK logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cdk-logs
          path: |
            infra/cdk.out/**
            infra/.cdk.staging/**
          if-no-files-found: ignore
          retention-days: 7
