# .github/workflows/ci.yml
#
# Monorepo CI for pnpm workspaces:
# - Install with Corepack + cache pnpm store
# - Lint, typecheck, build
# - Unit tests (with Postgres + Redis services)
# - (Optional) Playwright E2E when web app or e2e files change
# - (Optional) Docker image build & push on main/tags (GHCR)
#
# Safe defaults: if a script is missing in package.json, the step is skipped.

name: ci

on:
  push:
    branches: [main, develop, release/*]
    paths-ignore:
      - "**/*.md"
      - "**/*.MD"
      - "docs/**"
      - "ADRs/**"
      - ".changeset/**"
  pull_request:
    branches: ["**"]
    paths-ignore:
      - "**/*.md"
      - "**/*.MD"
      - "docs/**"
      - "ADRs/**"
      - ".changeset/**"

# Cancel previous runs on the same branch/PR to save minutes
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.x"
  # Set to your desired pnpm version, or let Corepack use the version from package.json `packageManager`
  PNPM_VERSION: "9.1.0"
  # Speeds up Next.js builds if used
  NEXT_TELEMETRY_DISABLED: "1"
  # Useful for headless Playwright
  CI: "1"

jobs:
  ##########
  # Lint
  ##########
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js + Corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Enable Corepack & set pnpm version
        run: |
          corepack enable
          if [ -n "${PNPM_VERSION}" ]; then corepack prepare pnpm@${PNPM_VERSION} --activate; fi
          pnpm -v

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Prettier (check)
        run: |
          if pnpm -w exec prettier -v >/dev/null 2>&1; then
            pnpm -w exec prettier --check .
          else
            echo "Prettier not configured; skipping."
          fi

      - name: ESLint
        run: |
          if pnpm -w exec eslint -v >/dev/null 2>&1; then
            pnpm -w exec eslint . --ext .ts,.tsx,.mts,.cts
          else
            echo "ESLint not configured; skipping."
          fi

  #############
  # Typecheck
  #############
  typecheck:
    runs-on: ubuntu-latest
    needs: [lint]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js + Corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Enable Corepack & set pnpm version
        run: |
          corepack enable
          if [ -n "${PNPM_VERSION}" ]; then corepack prepare pnpm@${PNPM_VERSION} --activate; fi

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: TypeScript - build mode
        run: |
          if [ -f "tsconfig.base.json" ] || [ -f "tsconfig.json" ]; then
            pnpm -w exec tsc -b || (echo "Typecheck failed" && exit 1)
          else
            echo "No tsconfig found; skipping typecheck."
          fi

  ###########
  # Build
  ###########
  build:
    runs-on: ubuntu-latest
    needs: [typecheck]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js + Corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Enable Corepack & set pnpm version
        run: |
          corepack enable
          if [ -n "${PNPM_VERSION}" ]; then corepack prepare pnpm@${PNPM_VERSION} --activate; fi

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build (workspace)
        run: |
          if pnpm -w run | grep -qE " build"; then
            pnpm -w run build
          else
            echo "No build script; skipping."
          fi

      - name: Upload build artifacts (web)
        if: ${{ hashFiles('apps/web/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: |
            apps/web/.next
            apps/web/next.config.mjs
            apps/web/package.json
          if-no-files-found: ignore
          retention-days: 7

  ##########################
  # Unit tests (with DB)
  ##########################
  test:
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: appdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      # Make sure your packages read these if they need DB/Redis in tests
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/appdb
      REDIS_URL: redis://localhost:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js + Corepack
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Enable Corepack & set pnpm version
        run: |
          corepack enable
          if [ -n "${PNPM_VERSION}" ]; then corepack prepare pnpm@${PNPM_VERSION} --activate; fi

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma (if present)
        run: |
          if [ -f packages/db/prisma/schema.prisma ]; then
            pnpm --filter @bowdoin/db exec prisma generate
          else
            echo "No Prisma schema; skipping generate."
          fi

      - name: Run unit tests (Vitest/Jest)
        run: |
          if pnpm -w exec vitest --version >/dev/null 2>&1; then
            pnpm -w exec vitest run --coverage --reporter=dot
          elif pnpm -w exec jest --version >/dev/null 2>&1; then
            pnpm -w exec jest --ci --coverage
          else
            echo "No known test runner; skipping tests."
          fi

      - name: Upload coverage (if generated)
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage/**
            **/coverage/**
          if-no-files-found: ignore
          retention-days: 7

  ########################################
  # Playwright E2E (only when web changed)
  ########################################
  e2e:
    runs-on: ubuntu-latest
    needs: [build]
    if: >
      github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Detect e2e changes
        id: change
        run: |
          if git ls-files apps/web/src/e2e apps/web | wc -l >/dev/null 2>&1; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js + Corepack
        if: steps.change.outputs.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Enable Corepack & set pnpm version
        if: steps.change.outputs.changed == 'true'
        run: |
          corepack enable
          if [ -n "${PNPM_VERSION}" ]; then corepack prepare pnpm@${PNPM_VERSION} --activate; fi

      - name: Install deps
        if: steps.change.outputs.changed == 'true'
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        if: steps.change.outputs.changed == 'true'
        run: pnpm --filter @bowdoin/web exec playwright install --with-deps

      - name: Build web
        if: steps.change.outputs.changed == 'true'
        run: pnpm --filter @bowdoin/web run build || echo "no web build script"

      - name: Start web (background)
        if: steps.change.outputs.changed == 'true'
        run: |
          if pnpm --filter @bowdoin/web run | grep -q "start"; then
            pnpm --filter @bowdoin/web run start -- -p 3000 &
            npx wait-on http://localhost:3000
          else
            echo "No start script; skipping server boot."
          fi

      - name: Run E2E tests
        if: steps.change.outputs.changed == 'true'
        run: |
          if [ -d apps/web/src/e2e ]; then
            pnpm --filter @bowdoin/web exec playwright test
          else
            echo "No E2E tests; skipping."
          fi

  ########################################
  # Docker build & push (optional)
  ########################################
  docker:
    # Build container images on main or tags; push to GHCR if token is present
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write   # required for GHCR push
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}/web
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        env:
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event_name != 'pull_request' && env.GHCR_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Extract version/tag
        id: meta
        run: |
          REF="${{ github.ref }}"
          if [[ "$REF" == refs/tags/* ]]; then
            TAG="${REF#refs/tags/}"
          else
            TAG="sha-${GITHUB_SHA::7}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Build and push (apps/web)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/web/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max